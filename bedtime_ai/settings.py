"""
Django settings for bedtime_ai project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import pymysql
pymysql.install_as_MySQLdb()
from google.cloud import secretmanager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

def get_secret(secret_id):
    try:
        project_id = os.environ.get('GOOGLE_CLOUD_PROJECT')
        if not project_id:
            raise ValueError("GOOGLE_CLOUD_PROJECT environment variable is not set")
        
        name = f"projects/{project_id}/secrets/{secret_id}/versions/latest"
        response = client.access_secret_version(request={"name": name})
        return response.payload.data.decode("UTF-8")
    except Exception as e:
        print(f"Error accessing secret {secret_id}: {str(e)}")
        return None
# Initialize the Secret Manager client
client = secretmanager.SecretManagerServiceClient()

SECRET_KEY = get_secret('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []
# Check if running on App Engine by looking for a specific env variable
gae_application_id = os.environ.get('GAE_APPLICATION')

if gae_application_id:
    # Running on App Engine
    # Format can be 's~project-id' or just 'project-id' for older runtimes
    project_id = gae_application_id.split('~')[-1]
    # Allow any subdomain of your app engine project
    ALLOWED_HOSTS.append(f'.{project_id}.uc.r.appspot.com')  # The dot prefix allows all subdomains
    # Add your custom domain
    ALLOWED_HOSTS.append('myaidventures.com')
    # Also add www subdomain if needed
    ALLOWED_HOSTS.append('www.myaidventures.com')
else:
    # Not running on App Engine - Assume local development or testing
    # Allow hosts needed for local access
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])
    # If you test 'check --deploy' locally with DEBUG=False, these ^ are needed.

# Optional: Add a placeholder if you want to explicitly see the expected deployed host locally
# if not gae_application_id and not DEBUG:
#    placeholder_project_id = os.environ.get('GOOGLE_CLOUD_PROJECT', 'your-project-id') # Get project ID if set
#    ALLOWED_HOSTS.append(f"{placeholder_project_id}.appspot.com")


# Final safeguard check (optional but good practice)
# If DEBUG is False and we are NOT on GAE and ONLY local hosts are added,
# it might indicate a potential misconfiguration for a non-GAE production env.
# However, for passing 'check --deploy' locally before GAE deployment, this is okay.
# if not DEBUG and not gae_application_id and not any(h not in ['localhost', '127.0.0.1'] for h in ALLOWED_HOSTS):
#    print("Warning: DEBUG is False, not running on GAE, and only local hosts are allowed.")
#    # raise ValueError("ALLOWED_HOSTS may not be configured correctly for a non-GAE production environment.")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'landing',
    'access',
    'main_app',
    'user_profile',
    'gemini',
    'crispy_forms',
    'bootstrap4',
    'crispy_bootstrap4',
    'phonenumber_field',
    'custom_admin',
    'storages'
]

CRISPY_TEMPLATE_PACK = 'bootstrap4' # Or 'bootstrap5' if using Bootstrap 5

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bedtime_ai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media', 
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bedtime_ai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



# Update the database configuration with error checking:
try:
    CLOUD_SQL_CONNECTION_NAME = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
    if not CLOUD_SQL_CONNECTION_NAME:
        raise ValueError("CLOUD_SQL_CONNECTION_NAME environment variable is not set")

    if os.getenv('GAE_APPLICATION'):
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': get_secret('DJANGO_DB_NAME'),
                'USER': get_secret('DJANGO_DB_USER'),
                'PASSWORD': get_secret('DJANGO_DB_PASSWORD'),
                'HOST': f'/cloudsql/{CLOUD_SQL_CONNECTION_NAME}',
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': get_secret('DJANGO_DB_NAME'),
                'USER': get_secret('DJANGO_DB_USER'),
                'PASSWORD': get_secret('DJANGO_DB_PASSWORD'),
                'HOST': '127.0.0.1',
                'PORT': '5432',
            }
        }
except Exception as e:
    print(f"Error configuring database: {str(e)}")
    raise

GOOGLE_API_KEY = get_secret('GOOGLE_API_KEY')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'google.cloud': {
            'handlers': ['console'],
            'level': 'ERROR',
        }
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'landing/static'),
    os.path.join(BASE_DIR, 'access/static'),
    os.path.join(BASE_DIR, 'main_app/static'),
    os.path.join(BASE_DIR, 'user_profile/static'),
    os.path.join(BASE_DIR, 'gemini/static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'thefairshoppe@gmail.com'
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = 'thefairshoppe@gmail.com'
ADMIN_EMAIL = 'thefairshoppe@gmail.com'
EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds

# CSRF settings
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = True

LOGIN_URL = '/access/login/'
LOGIN_REDIRECT_URL = '/main_app/'
LOGOUT_REDIRECT_URL = '/access/login/'

# settings.py
# IMPORTANT FOR APP ENGINE/PROXIES: Trust the X-Forwarded-Proto header
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if not DEBUG: # Often enabled only when DEBUG is False
    SECURE_SSL_REDIRECT = True

# settings.py
if not DEBUG: # Often enabled only when DEBUG is False
     SESSION_COOKIE_SECURE = True
     # Also recommended:
     CSRF_COOKIE_SECURE = True # Ensure CSRF cookie is also secure

# settings.py
if not DEBUG: # Often enabled only when DEBUG is False
    # Enable HSTS - START WITH A LOW VALUE FOR TESTING!
    SECURE_HSTS_SECONDS = 3600 # 1 hour (for testing)
    # Once confirmed working, consider increasing (e.g., 31536000 for 1 year)

    # Optional, but usually recommended with HSTS:
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True # Consider only after extensive testing and understanding the implications

# Stripe Settings
STRIPE_PUBLISHABLE_KEY = 'pk_live_51R4A7qDbuJ9TlqXESoilBtyv7rdNbfOnHv2cwinkNHXMkD92KziljZbz22u8QOhbA9xfidgbOl7kNxjFq1HDPRp700plLo6NTN'  # You'll replace this
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')  # You'll replace this
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')  # You'll replace this

# Product prices (in cents)
STRIPE_PRICE_IDS = {
    'free': 'Free',
    'daily': 'Daily',  # You'll replace this
    'family': 'Family',
    'unlimited': 'Unlimited'  # You'll replace this
}

# Success and cancel URLs
STRIPE_SUCCESS_URL = 'http://write-456414.uc.r.appspot.com/payment/success/'  # Update with your domain
STRIPE_CANCEL_URL = 'http://write-456414.uc.r.appspot.com/payment/cancel/'  # Update with your domain

# Media files configuration


# Timeout settings
CONN_MAX_AGE = 60
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB

# Request handling settings
WSGI_APPLICATION = 'bedtime_ai.wsgi.application'

if os.getenv('GAE_APPLICATION'):
    # Use GCS for media storage on App Engine
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_BUCKET_NAME = 'write-images'  # Your bucket name
    
    # Remove the /media/ part since we're organizing by story_id directly
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
    
    # These settings help ensure proper public access
    GS_DEFAULT_ACL = 'publicRead'
    GS_FILE_OVERWRITE = False
    
    # Don't need MEDIA_ROOT when using GCS
    MEDIA_ROOT = ''
else:
    # Development settings for local filesystem media
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Add this line to specify the custom user model
AUTH_USER_MODEL = 'access.User'

if os.getenv('GAE_APPLICATION'):
    # Production
    SITE_URL = 'https://myaidventures.com'
else:
    # Development
    SITE_URL = 'http://127.0.0.1:8000'  # or whatever your local development URL is